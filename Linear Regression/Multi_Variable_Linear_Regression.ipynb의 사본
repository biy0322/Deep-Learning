{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"Multi_Variable_Linear_Regression.ipynb","provenance":[],"mount_file_id":"17dcdjt38Zfpr91-k6Mt2hBDPEe8GUsuU","authorship_tag":"ABX9TyN+9rczxNuIUNWz0LVX1zXY"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":6,"metadata":{"id":"mLKO8s9D0Qhr","executionInfo":{"status":"ok","timestamp":1660723769746,"user_tz":-540,"elapsed":4,"user":{"displayName":"백인영","userId":"05799183890128669292"}}},"outputs":[],"source":["import torch\n","import torch.nn\n","import torch.functional as F\n","from torch.utils.data import Dataset, DataLoader\n","import torch.utils.data as data_utils\n","\n","import pandas as pd\n","import numpy as np\n","from sklearn.datasets import load_boston\n","from sklearn.preprocessing import StandardScaler\n","from sklearn.model_selection import train_test_split\n","\n","\n","import matplotlib.pyplot as plt\n"]},{"cell_type":"code","source":["df_raw = pd.read_csv(\"/content/drive/MyDrive/Colab Notebooks/data/BostonHousing.csv\")\n","df_raw.head(5)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":206},"id":"DHOgh3f60y49","executionInfo":{"status":"ok","timestamp":1660723816506,"user_tz":-540,"elapsed":466,"user":{"displayName":"백인영","userId":"05799183890128669292"}},"outputId":"9710b2d0-fc62-46c8-c9c4-c323b7dc7b7a"},"execution_count":7,"outputs":[{"output_type":"execute_result","data":{"text/plain":["      crim    zn  indus  chas    nox     rm   age     dis  rad  tax  ptratio  \\\n","0  0.00632  18.0   2.31     0  0.538  6.575  65.2  4.0900    1  296     15.3   \n","1  0.02731   0.0   7.07     0  0.469  6.421  78.9  4.9671    2  242     17.8   \n","2  0.02729   0.0   7.07     0  0.469  7.185  61.1  4.9671    2  242     17.8   \n","3  0.03237   0.0   2.18     0  0.458  6.998  45.8  6.0622    3  222     18.7   \n","4  0.06905   0.0   2.18     0  0.458  7.147  54.2  6.0622    3  222     18.7   \n","\n","    black  lstat  medv  \n","0  396.90   4.98  24.0  \n","1  396.90   9.14  21.6  \n","2  392.83   4.03  34.7  \n","3  394.63   2.94  33.4  \n","4  396.90   5.33  36.2  "],"text/html":["\n","  <div id=\"df-ee272398-1699-4882-b520-7341f7ac75b1\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>crim</th>\n","      <th>zn</th>\n","      <th>indus</th>\n","      <th>chas</th>\n","      <th>nox</th>\n","      <th>rm</th>\n","      <th>age</th>\n","      <th>dis</th>\n","      <th>rad</th>\n","      <th>tax</th>\n","      <th>ptratio</th>\n","      <th>black</th>\n","      <th>lstat</th>\n","      <th>medv</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>0.00632</td>\n","      <td>18.0</td>\n","      <td>2.31</td>\n","      <td>0</td>\n","      <td>0.538</td>\n","      <td>6.575</td>\n","      <td>65.2</td>\n","      <td>4.0900</td>\n","      <td>1</td>\n","      <td>296</td>\n","      <td>15.3</td>\n","      <td>396.90</td>\n","      <td>4.98</td>\n","      <td>24.0</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>0.02731</td>\n","      <td>0.0</td>\n","      <td>7.07</td>\n","      <td>0</td>\n","      <td>0.469</td>\n","      <td>6.421</td>\n","      <td>78.9</td>\n","      <td>4.9671</td>\n","      <td>2</td>\n","      <td>242</td>\n","      <td>17.8</td>\n","      <td>396.90</td>\n","      <td>9.14</td>\n","      <td>21.6</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>0.02729</td>\n","      <td>0.0</td>\n","      <td>7.07</td>\n","      <td>0</td>\n","      <td>0.469</td>\n","      <td>7.185</td>\n","      <td>61.1</td>\n","      <td>4.9671</td>\n","      <td>2</td>\n","      <td>242</td>\n","      <td>17.8</td>\n","      <td>392.83</td>\n","      <td>4.03</td>\n","      <td>34.7</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>0.03237</td>\n","      <td>0.0</td>\n","      <td>2.18</td>\n","      <td>0</td>\n","      <td>0.458</td>\n","      <td>6.998</td>\n","      <td>45.8</td>\n","      <td>6.0622</td>\n","      <td>3</td>\n","      <td>222</td>\n","      <td>18.7</td>\n","      <td>394.63</td>\n","      <td>2.94</td>\n","      <td>33.4</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>0.06905</td>\n","      <td>0.0</td>\n","      <td>2.18</td>\n","      <td>0</td>\n","      <td>0.458</td>\n","      <td>7.147</td>\n","      <td>54.2</td>\n","      <td>6.0622</td>\n","      <td>3</td>\n","      <td>222</td>\n","      <td>18.7</td>\n","      <td>396.90</td>\n","      <td>5.33</td>\n","      <td>36.2</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-ee272398-1699-4882-b520-7341f7ac75b1')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-ee272398-1699-4882-b520-7341f7ac75b1 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-ee272398-1699-4882-b520-7341f7ac75b1');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":7}]},{"cell_type":"markdown","source":["# 미국 보스턴 지방의 집 값을 13개의 설명 변수를 이용하여 예측하는 모델 생성"],"metadata":{"id":"mK3N5B_g04gj"}},{"cell_type":"markdown","source":["[변수 설명]\n","- **medv: 주택가격 <- 레이블(y)**\n","- crim: 1인당 범죄율\n","- zn: 주거지 비율\n","- indus: 비주거 상업지역 비율\n","- chas: 강조망(1: 조망, 0: 비조망)\n","- nox: 산회질소 농도\n","- rm: 평균 방 수\n","- age: 집의 노후화\n","- dis: downtown 접근거리\n","- rad: 방사형 도로 접근성\n","- tax: 재산세율\n","- ptratio: 학생/교사 비율\n","- b: 흑인 인구 비율\n","- lstat: 저소득층 비율"],"metadata":{"id":"eGiwXrU20_a8"}},{"cell_type":"markdown","source":["# 1. 데이터 전처리"],"metadata":{"id":"9qyDs6G-2KvE"}},{"cell_type":"code","source":["x = df_raw.drop(columns='medv')\n","y = df_raw['medv']\n","\n","print(df_raw.shape)\n","print(x.shape)\n","print(y.shape)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"NtFCxf522NFL","executionInfo":{"status":"ok","timestamp":1660724062670,"user_tz":-540,"elapsed":37,"user":{"displayName":"백인영","userId":"05799183890128669292"}},"outputId":"4d38e36e-f8fc-470d-cec0-62d1db24ea10"},"execution_count":10,"outputs":[{"output_type":"stream","name":"stdout","text":["(506, 14)\n","(506, 13)\n","(506,)\n"]}]},{"cell_type":"markdown","source":["\n","\n","> 학습데이터 & 테스트데이터 일정비율로 나누기\n"],"metadata":{"id":"9KBr6Z9R5-0Y"}},{"cell_type":"code","source":["x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.3, random_state=1234)\n","\n","print(\"x_train: \", x_train.shape)\n","print(\"y_train: \", y_train.shape, '\\n')\n","\n","print(\"x_test: \", x_test.shape)\n","print(\"y_test: \", y_test.shape)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"xY0vmPkY02Xv","executionInfo":{"status":"ok","timestamp":1660724286972,"user_tz":-540,"elapsed":23,"user":{"displayName":"백인영","userId":"05799183890128669292"}},"outputId":"d06a50cf-1320-4b8f-9c19-9cbcfd7a61db"},"execution_count":11,"outputs":[{"output_type":"stream","name":"stdout","text":["x_train:  (354, 13)\n","y_train:  (354,) \n","\n","x_test:  (152, 13)\n","y_test:  (152,)\n"]}]},{"cell_type":"markdown","source":["Scaling\n","\n","> $$ x_in = \\frac{x_io - \\mu_i}{\\sigma_i} $$\n","\n"],"metadata":{"id":"zOxy7AHe5peh"}},{"cell_type":"code","source":["scaler = StandardScaler()\n","scaler.fit(x_train)\n","\n","x_train_scale = scaler.transform(x_train)\n","x_test_scale = scaler.transform(x_test)\n","\n","# array -> tensor\n","x_train_tensor = torch.FloatTensor(x_train_scale)\n","y_train_tensor = torch.FloatTensor(y_train.values)\n","\n","x_test_tensor = torch.FloatTensor(x_test_scale)\n","y_test_tensor = torch.FloatTensor(y_test.values)"],"metadata":{"id":"5pD73CtX4Y2H","executionInfo":{"status":"ok","timestamp":1660724484559,"user_tz":-540,"elapsed":398,"user":{"displayName":"백인영","userId":"05799183890128669292"}}},"execution_count":13,"outputs":[]},{"cell_type":"markdown","source":["\n","\n","> 학습데이터 배치화 시키기\n","\n","\n","\n"],"metadata":{"id":"KkZ5h_sU6F0r"}},{"cell_type":"code","source":["train_data = data_utils.TensorDataset(x_train_tensor, y_train_tensor)\n","\n","dataloader = data_utils.DataLoader(train_data, batch_size=100, shuffle=True, drop_last=True)\n","\n","# 배치화된 데이터 확인\n","# batch_idx = iteration\n","# datas = (x,y)\n","\n","for batch_idx, datas in enumerate(dataloader):\n","\n","  print(batch_idx)\n","  print(datas[0].shape) # x_train\n","  print(datas[1].shape) # y_train"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"xR7A4hnr5HN2","executionInfo":{"status":"ok","timestamp":1660726067761,"user_tz":-540,"elapsed":412,"user":{"displayName":"백인영","userId":"05799183890128669292"}},"outputId":"8abae552-356d-4b15-c232-88f8b99fc950"},"execution_count":15,"outputs":[{"output_type":"stream","name":"stdout","text":["0\n","torch.Size([100, 13])\n","torch.Size([100])\n","1\n","torch.Size([100, 13])\n","torch.Size([100])\n","2\n","torch.Size([100, 13])\n","torch.Size([100])\n"]}]},{"cell_type":"markdown","source":["# 2. Model"],"metadata":{"id":"xFu9IPBv_zY1"}},{"cell_type":"code","source":["# parameter 정의\n","input_size = 13\n","output_size = 1\n","learning_rate = 0.1\n","n_epochs = 200"],"metadata":{"id":"sdersi2d_yhv","executionInfo":{"status":"ok","timestamp":1660727186482,"user_tz":-540,"elapsed":464,"user":{"displayName":"백인영","userId":"05799183890128669292"}}},"execution_count":36,"outputs":[]},{"cell_type":"code","source":["# model 생성\n","model = torch.nn.Linear(input_size, output_size)"],"metadata":{"id":"mJDBMG_0_GRc","executionInfo":{"status":"ok","timestamp":1660727187045,"user_tz":-540,"elapsed":3,"user":{"displayName":"백인영","userId":"05799183890128669292"}}},"execution_count":37,"outputs":[]},{"cell_type":"code","source":["# 손실함수 생성\n","criterion = torch.nn.MSELoss()\n","\n","# optimizer 생성\n","optimizer = torch.optim.SGD(model.parameters(), lr=learning_rate)"],"metadata":{"id":"cU-00EgqAAgl","executionInfo":{"status":"ok","timestamp":1660727187046,"user_tz":-540,"elapsed":4,"user":{"displayName":"백인영","userId":"05799183890128669292"}}},"execution_count":38,"outputs":[]},{"cell_type":"markdown","source":["# 3. Training"],"metadata":{"id":"sjq41RNlAXn9"}},{"cell_type":"code","source":["train_loss = []\n","test_loss = []\n","\n","for epoch in range(n_epochs+1):\n","\n","  for idx, (x_batch, y_batch) in enumerate(dataloader):\n","\n","    # Batch 학습\n","    model.train()\n","    optimizer.zero_grad() # 역전파 하기 전 gradient 값 초기화(0으로 만들기)\n","\n","    y_pred = model(x_batch)\n","    y_pred = y_pred.reshape(-1)\n","\n","    loss_train = criterion(y_pred, y_batch)\n","\n","    #역전파 단계: 모델의 학습 가능한 모든 매개변수에 대해 손실의 변화도를 계산.\n","    loss_train.backward() # gradient 값 구하기 # 모델의 모든 학습 가능한 매개변수의 변화도 계산.\n","    optimizer.step() # weight update\n","\n","    # validation # overfitting 확인\n","    model.eval()\n","    y_test_pred = model(x_test_tensor)\n","    y_test_pred = y_test_pred.reshape(-1)\n","    \n","    loss_test = criterion(y_test_pred, y_test_tensor)\n","\n","  train_loss.append(loss_train.item())\n","  test_loss.append(loss_test.item())\n","  print(\"epoch:{}, Loss_train:{:.2f}, Loss_test:{:.2f}\".format( epoch, train_loss[-1], test_loss[-1]))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"yzGjJWd6ANTL","executionInfo":{"status":"ok","timestamp":1660727188770,"user_tz":-540,"elapsed":932,"user":{"displayName":"백인영","userId":"05799183890128669292"}},"outputId":"e0bdb45b-134c-4e6c-a821-3248e853ac75"},"execution_count":39,"outputs":[{"output_type":"stream","name":"stdout","text":["epoch:0, Loss_train:262.43, Loss_test:160.70\n","epoch:1, Loss_train:94.44, Loss_test:59.35\n","epoch:2, Loss_train:46.15, Loss_test:32.28\n","epoch:3, Loss_train:35.24, Loss_test:25.54\n","epoch:4, Loss_train:24.25, Loss_test:23.39\n","epoch:5, Loss_train:19.74, Loss_test:23.11\n","epoch:6, Loss_train:25.69, Loss_test:22.73\n","epoch:7, Loss_train:21.08, Loss_test:22.46\n","epoch:8, Loss_train:30.70, Loss_test:22.40\n","epoch:9, Loss_train:23.06, Loss_test:22.43\n","epoch:10, Loss_train:15.29, Loss_test:22.17\n","epoch:11, Loss_train:23.64, Loss_test:23.91\n","epoch:12, Loss_train:15.31, Loss_test:22.40\n","epoch:13, Loss_train:26.02, Loss_test:22.75\n","epoch:14, Loss_train:22.98, Loss_test:23.06\n","epoch:15, Loss_train:23.48, Loss_test:22.93\n","epoch:16, Loss_train:13.77, Loss_test:24.57\n","epoch:17, Loss_train:19.94, Loss_test:22.99\n","epoch:18, Loss_train:33.02, Loss_test:25.19\n","epoch:19, Loss_train:32.57, Loss_test:24.64\n","epoch:20, Loss_train:16.87, Loss_test:23.65\n","epoch:21, Loss_train:22.61, Loss_test:23.74\n","epoch:22, Loss_train:24.66, Loss_test:23.57\n","epoch:23, Loss_train:31.59, Loss_test:24.07\n","epoch:24, Loss_train:17.85, Loss_test:24.28\n","epoch:25, Loss_train:23.59, Loss_test:23.42\n","epoch:26, Loss_train:30.67, Loss_test:24.44\n","epoch:27, Loss_train:25.30, Loss_test:23.19\n","epoch:28, Loss_train:22.55, Loss_test:23.41\n","epoch:29, Loss_train:29.75, Loss_test:25.83\n","epoch:30, Loss_train:22.87, Loss_test:23.35\n","epoch:31, Loss_train:24.50, Loss_test:23.51\n","epoch:32, Loss_train:29.12, Loss_test:25.57\n","epoch:33, Loss_train:18.87, Loss_test:23.99\n","epoch:34, Loss_train:21.07, Loss_test:23.25\n","epoch:35, Loss_train:25.86, Loss_test:23.81\n","epoch:36, Loss_train:26.83, Loss_test:25.77\n","epoch:37, Loss_train:24.88, Loss_test:23.78\n","epoch:38, Loss_train:23.59, Loss_test:23.54\n","epoch:39, Loss_train:29.61, Loss_test:26.69\n","epoch:40, Loss_train:24.33, Loss_test:23.68\n","epoch:41, Loss_train:26.47, Loss_test:24.76\n","epoch:42, Loss_train:22.49, Loss_test:24.43\n","epoch:43, Loss_train:19.51, Loss_test:23.80\n","epoch:44, Loss_train:23.60, Loss_test:23.80\n","epoch:45, Loss_train:19.49, Loss_test:23.53\n","epoch:46, Loss_train:19.26, Loss_test:24.93\n","epoch:47, Loss_train:21.41, Loss_test:23.72\n","epoch:48, Loss_train:33.84, Loss_test:28.97\n","epoch:49, Loss_train:33.71, Loss_test:25.08\n","epoch:50, Loss_train:22.80, Loss_test:24.13\n","epoch:51, Loss_train:21.94, Loss_test:24.19\n","epoch:52, Loss_train:17.72, Loss_test:24.08\n","epoch:53, Loss_train:20.35, Loss_test:24.17\n","epoch:54, Loss_train:16.08, Loss_test:24.37\n","epoch:55, Loss_train:21.01, Loss_test:23.87\n","epoch:56, Loss_train:17.03, Loss_test:24.38\n","epoch:57, Loss_train:19.18, Loss_test:24.47\n","epoch:58, Loss_train:23.11, Loss_test:23.94\n","epoch:59, Loss_train:21.03, Loss_test:24.35\n","epoch:60, Loss_train:30.09, Loss_test:25.17\n","epoch:61, Loss_train:28.11, Loss_test:26.21\n","epoch:62, Loss_train:30.37, Loss_test:25.31\n","epoch:63, Loss_train:21.40, Loss_test:24.68\n","epoch:64, Loss_train:23.97, Loss_test:23.64\n","epoch:65, Loss_train:14.17, Loss_test:23.89\n","epoch:66, Loss_train:22.35, Loss_test:24.08\n","epoch:67, Loss_train:19.55, Loss_test:24.13\n","epoch:68, Loss_train:24.21, Loss_test:25.84\n","epoch:69, Loss_train:18.53, Loss_test:24.73\n","epoch:70, Loss_train:19.23, Loss_test:24.51\n","epoch:71, Loss_train:28.90, Loss_test:27.02\n","epoch:72, Loss_train:29.47, Loss_test:25.49\n","epoch:73, Loss_train:17.28, Loss_test:25.16\n","epoch:74, Loss_train:30.08, Loss_test:25.09\n","epoch:75, Loss_train:24.25, Loss_test:24.68\n","epoch:76, Loss_train:24.05, Loss_test:24.28\n","epoch:77, Loss_train:20.93, Loss_test:23.93\n","epoch:78, Loss_train:26.71, Loss_test:24.16\n","epoch:79, Loss_train:22.96, Loss_test:25.34\n","epoch:80, Loss_train:20.27, Loss_test:24.57\n","epoch:81, Loss_train:12.73, Loss_test:24.41\n","epoch:82, Loss_train:16.37, Loss_test:24.67\n","epoch:83, Loss_train:14.33, Loss_test:25.87\n","epoch:84, Loss_train:33.86, Loss_test:24.81\n","epoch:85, Loss_train:12.09, Loss_test:24.44\n","epoch:86, Loss_train:19.13, Loss_test:24.32\n","epoch:87, Loss_train:16.68, Loss_test:23.88\n","epoch:88, Loss_train:20.09, Loss_test:24.32\n","epoch:89, Loss_train:27.50, Loss_test:23.71\n","epoch:90, Loss_train:12.94, Loss_test:24.56\n","epoch:91, Loss_train:17.32, Loss_test:23.75\n","epoch:92, Loss_train:22.53, Loss_test:23.79\n","epoch:93, Loss_train:31.77, Loss_test:28.42\n","epoch:94, Loss_train:20.67, Loss_test:24.49\n","epoch:95, Loss_train:15.68, Loss_test:23.98\n","epoch:96, Loss_train:20.61, Loss_test:24.35\n","epoch:97, Loss_train:20.34, Loss_test:23.97\n","epoch:98, Loss_train:24.50, Loss_test:24.72\n","epoch:99, Loss_train:17.77, Loss_test:24.37\n","epoch:100, Loss_train:14.67, Loss_test:24.34\n","epoch:101, Loss_train:13.48, Loss_test:23.60\n","epoch:102, Loss_train:20.30, Loss_test:23.90\n","epoch:103, Loss_train:32.59, Loss_test:26.46\n","epoch:104, Loss_train:23.97, Loss_test:24.18\n","epoch:105, Loss_train:16.66, Loss_test:23.80\n","epoch:106, Loss_train:25.46, Loss_test:24.44\n","epoch:107, Loss_train:27.51, Loss_test:25.30\n","epoch:108, Loss_train:21.08, Loss_test:24.61\n","epoch:109, Loss_train:18.38, Loss_test:23.63\n","epoch:110, Loss_train:20.99, Loss_test:23.54\n","epoch:111, Loss_train:26.35, Loss_test:25.04\n","epoch:112, Loss_train:27.27, Loss_test:24.27\n","epoch:113, Loss_train:16.19, Loss_test:23.50\n","epoch:114, Loss_train:14.65, Loss_test:23.80\n","epoch:115, Loss_train:19.46, Loss_test:23.90\n","epoch:116, Loss_train:17.26, Loss_test:23.76\n","epoch:117, Loss_train:23.77, Loss_test:23.79\n","epoch:118, Loss_train:19.26, Loss_test:24.98\n","epoch:119, Loss_train:22.20, Loss_test:23.80\n","epoch:120, Loss_train:17.92, Loss_test:24.08\n","epoch:121, Loss_train:15.75, Loss_test:24.37\n","epoch:122, Loss_train:19.77, Loss_test:24.90\n","epoch:123, Loss_train:33.62, Loss_test:26.28\n","epoch:124, Loss_train:23.64, Loss_test:24.29\n","epoch:125, Loss_train:23.28, Loss_test:27.11\n","epoch:126, Loss_train:30.02, Loss_test:25.48\n","epoch:127, Loss_train:32.62, Loss_test:25.86\n","epoch:128, Loss_train:24.79, Loss_test:24.59\n","epoch:129, Loss_train:30.98, Loss_test:25.25\n","epoch:130, Loss_train:31.09, Loss_test:25.83\n","epoch:131, Loss_train:25.33, Loss_test:25.50\n","epoch:132, Loss_train:21.64, Loss_test:25.50\n","epoch:133, Loss_train:14.74, Loss_test:23.88\n","epoch:134, Loss_train:17.53, Loss_test:23.76\n","epoch:135, Loss_train:24.88, Loss_test:24.96\n","epoch:136, Loss_train:17.73, Loss_test:23.91\n","epoch:137, Loss_train:22.23, Loss_test:24.02\n","epoch:138, Loss_train:27.26, Loss_test:24.04\n","epoch:139, Loss_train:16.85, Loss_test:23.67\n","epoch:140, Loss_train:16.54, Loss_test:24.17\n","epoch:141, Loss_train:13.22, Loss_test:24.55\n","epoch:142, Loss_train:24.62, Loss_test:27.46\n","epoch:143, Loss_train:19.60, Loss_test:24.12\n","epoch:144, Loss_train:25.16, Loss_test:24.88\n","epoch:145, Loss_train:25.94, Loss_test:25.40\n","epoch:146, Loss_train:22.66, Loss_test:24.85\n","epoch:147, Loss_train:15.67, Loss_test:24.32\n","epoch:148, Loss_train:19.51, Loss_test:24.34\n","epoch:149, Loss_train:23.40, Loss_test:25.17\n","epoch:150, Loss_train:15.80, Loss_test:24.58\n","epoch:151, Loss_train:20.64, Loss_test:24.28\n","epoch:152, Loss_train:24.17, Loss_test:24.46\n","epoch:153, Loss_train:24.25, Loss_test:24.77\n","epoch:154, Loss_train:17.72, Loss_test:24.12\n","epoch:155, Loss_train:19.71, Loss_test:27.17\n","epoch:156, Loss_train:23.24, Loss_test:24.62\n","epoch:157, Loss_train:23.89, Loss_test:24.44\n","epoch:158, Loss_train:16.96, Loss_test:24.90\n","epoch:159, Loss_train:26.63, Loss_test:24.19\n","epoch:160, Loss_train:22.76, Loss_test:25.27\n","epoch:161, Loss_train:20.82, Loss_test:24.09\n","epoch:162, Loss_train:25.81, Loss_test:24.30\n","epoch:163, Loss_train:22.91, Loss_test:23.92\n","epoch:164, Loss_train:23.32, Loss_test:24.11\n","epoch:165, Loss_train:20.19, Loss_test:25.17\n","epoch:166, Loss_train:20.03, Loss_test:26.23\n","epoch:167, Loss_train:22.63, Loss_test:25.58\n","epoch:168, Loss_train:24.15, Loss_test:24.69\n","epoch:169, Loss_train:33.24, Loss_test:26.16\n","epoch:170, Loss_train:27.69, Loss_test:23.87\n","epoch:171, Loss_train:14.25, Loss_test:24.20\n","epoch:172, Loss_train:25.91, Loss_test:25.11\n","epoch:173, Loss_train:34.29, Loss_test:24.64\n","epoch:174, Loss_train:22.80, Loss_test:24.11\n","epoch:175, Loss_train:13.66, Loss_test:23.71\n","epoch:176, Loss_train:14.63, Loss_test:23.98\n","epoch:177, Loss_train:25.34, Loss_test:24.19\n","epoch:178, Loss_train:22.21, Loss_test:23.85\n","epoch:179, Loss_train:21.56, Loss_test:24.66\n","epoch:180, Loss_train:31.10, Loss_test:27.24\n","epoch:181, Loss_train:30.55, Loss_test:27.51\n","epoch:182, Loss_train:27.95, Loss_test:24.21\n","epoch:183, Loss_train:29.16, Loss_test:24.28\n","epoch:184, Loss_train:26.51, Loss_test:24.11\n","epoch:185, Loss_train:21.05, Loss_test:24.09\n","epoch:186, Loss_train:24.54, Loss_test:24.49\n","epoch:187, Loss_train:21.03, Loss_test:24.01\n","epoch:188, Loss_train:27.04, Loss_test:27.41\n","epoch:189, Loss_train:21.40, Loss_test:23.77\n","epoch:190, Loss_train:21.00, Loss_test:23.80\n","epoch:191, Loss_train:16.38, Loss_test:24.38\n","epoch:192, Loss_train:26.01, Loss_test:25.65\n","epoch:193, Loss_train:15.30, Loss_test:24.20\n","epoch:194, Loss_train:20.14, Loss_test:23.91\n","epoch:195, Loss_train:23.80, Loss_test:24.10\n","epoch:196, Loss_train:24.20, Loss_test:24.93\n","epoch:197, Loss_train:21.08, Loss_test:23.91\n","epoch:198, Loss_train:24.59, Loss_test:23.68\n","epoch:199, Loss_train:26.18, Loss_test:24.51\n","epoch:200, Loss_train:15.32, Loss_test:24.14\n"]}]},{"cell_type":"code","source":["# Loss 값 plot\n","\n","plt.figure()\n","plt.plot(train_loss, label='train')\n","plt.plot(test_loss, label='test')\n","plt.legend(loc='upper right')\n","plt.title('Model loss')\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":281},"id":"1cQP4tXWBQAH","executionInfo":{"status":"ok","timestamp":1660727188771,"user_tz":-540,"elapsed":14,"user":{"displayName":"백인영","userId":"05799183890128669292"}},"outputId":"8d8393f7-8c46-4993-c4a3-eb7eaddfba5a"},"execution_count":40,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 1 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}}]},{"cell_type":"markdown","source":["### optimizer.zero_grad() 실행 이유\n","\n","- 미분을 통해 얻은 기울기를 0으로 초기화\n","- 기울기를 초기화해야만 새로운 가중치 편향에 대해서 새로운 기울기 구할 수 있음"],"metadata":{"id":"UMMIn856EMze"}},{"cell_type":"markdown","source":["### cost.backward() 함수 호출\n","- 가중치 w와 편향 b에 대해 기울기 계산\n"],"metadata":{"id":"MbHxGa_4Ef14"}},{"cell_type":"markdown","source":["### optimizer.step() 함수 호출\n","- optimizer: 경사하강법 최적화 함수\n","- 인수로 들어갔던 w와 b에 리턴되는 변수들의 기울기에 학습률(learning rate) 0.01을 곱하여 빼줌으로서 업데이트"],"metadata":{"id":"h5QqY9Z5E0dI"}},{"cell_type":"code","source":[""],"metadata":{"id":"jc7PLfdXDRmQ"},"execution_count":null,"outputs":[]}]}