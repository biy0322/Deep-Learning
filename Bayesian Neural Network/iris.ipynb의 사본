{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"iris.ipynb","provenance":[],"authorship_tag":"ABX9TyP57fYdHwNlN0jpzUsvqjTR"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","source":["pip install torchbnn"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"ZJ7snOaoWbwJ","executionInfo":{"status":"ok","timestamp":1661493492335,"user_tz":-540,"elapsed":2669,"user":{"displayName":"백인영","userId":"05799183890128669292"}},"outputId":"a7e96a9a-516a-41b3-a7f0-76f0bea8a83e"},"execution_count":259,"outputs":[{"output_type":"stream","name":"stdout","text":["Looking in indexes: https://pypi.org/simple, https://us-python.pkg.dev/colab-wheels/public/simple/\n","Requirement already satisfied: torchbnn in /usr/local/lib/python3.7/dist-packages (1.2)\n"]}]},{"cell_type":"code","execution_count":260,"metadata":{"id":"oNB7EvE2WGhn","executionInfo":{"status":"ok","timestamp":1661493492336,"user_tz":-540,"elapsed":54,"user":{"displayName":"백인영","userId":"05799183890128669292"}}},"outputs":[],"source":["import numpy as np\n","import pandas as pd\n","\n","import torch\n","import torch.nn as nn\n","import torch.optim as optim\n","\n","import torchbnn as bnn\n","\n","import torch.utils.data as data_utils\n","from torch.utils.data import DataLoader\n","\n","import matplotlib.pyplot as plt\n","import seaborn as sns\n","\n","from sklearn.datasets import load_iris\n","from sklearn.model_selection import train_test_split"]},{"cell_type":"code","source":["device = torch.device(\"cpu\")"],"metadata":{"id":"TapVlLrxWYXH","executionInfo":{"status":"ok","timestamp":1661493492336,"user_tz":-540,"elapsed":51,"user":{"displayName":"백인영","userId":"05799183890128669292"}}},"execution_count":261,"outputs":[]},{"cell_type":"markdown","source":["# Dataset"],"metadata":{"id":"YPlFX2eTWx15"}},{"cell_type":"code","source":["from IPython.display import Image\n","Image(url='https://user-images.githubusercontent.com/15958325/56006707-f69f3680-5d10-11e9-8609-25ba5034607e.png')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":302},"id":"ZhXIhlSWcuEx","executionInfo":{"status":"ok","timestamp":1661493492338,"user_tz":-540,"elapsed":53,"user":{"displayName":"백인영","userId":"05799183890128669292"}},"outputId":"4f299bc5-4e36-4db0-f3c6-236e1bf19255"},"execution_count":262,"outputs":[{"output_type":"execute_result","data":{"text/html":["<img src=\"https://user-images.githubusercontent.com/15958325/56006707-f69f3680-5d10-11e9-8609-25ba5034607e.png\"/>"],"text/plain":["<IPython.core.display.Image object>"]},"metadata":{},"execution_count":262}]},{"cell_type":"code","source":["iris = load_iris()\n","\n","features = iris['data']\n","feature_names = iris['feature_names']\n","\n","print(features[:5])\n","print(feature_names)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"hWBe4yjCb4fM","executionInfo":{"status":"ok","timestamp":1661493492343,"user_tz":-540,"elapsed":55,"user":{"displayName":"백인영","userId":"05799183890128669292"}},"outputId":"fdb0643d-cd85-40a8-8561-9f2c9cd278ab"},"execution_count":263,"outputs":[{"output_type":"stream","name":"stdout","text":["[[ 5.1000  3.5000  1.4000  0.2000]\n"," [ 4.9000  3.0000  1.4000  0.2000]\n"," [ 4.7000  3.2000  1.3000  0.2000]\n"," [ 4.6000  3.1000  1.5000  0.2000]\n"," [ 5.0000  3.6000  1.4000  0.2000]]\n","['sepal length (cm)', 'sepal width (cm)', 'petal length (cm)', 'petal width (cm)']\n"]}]},{"cell_type":"markdown","source":["- 4개의 feature\n","- sepal: 꽃받침 / petal: 꽃잎"],"metadata":{"id":"5HVTNuRmcP6r"}},{"cell_type":"code","source":["labels = iris['target']\n","target_name = iris['target_names']\n","print(labels)\n","print(target_name)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"GOlFPxnScYLH","executionInfo":{"status":"ok","timestamp":1661493492932,"user_tz":-540,"elapsed":625,"user":{"displayName":"백인영","userId":"05799183890128669292"}},"outputId":"abca38fb-28ca-4fb6-861b-0acbed349f61"},"execution_count":264,"outputs":[{"output_type":"stream","name":"stdout","text":["[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n"," 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n"," 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 2\n"," 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2\n"," 2 2]\n","['setosa' 'versicolor' 'virginica']\n"]}]},{"cell_type":"markdown","source":["- 3개의 Target\n","  - 'Setosa', 'Versicolor', 'Virginica'"],"metadata":{"id":"EfJvPycGc2my"}},{"cell_type":"code","source":["df_feature = pd.DataFrame(features, columns = feature_names)\n","df_feature.head(5)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":206},"id":"hJlnJ6owc_bV","executionInfo":{"status":"ok","timestamp":1661493492935,"user_tz":-540,"elapsed":72,"user":{"displayName":"백인영","userId":"05799183890128669292"}},"outputId":"909e465f-005a-4a4a-e589-5c9124e9dd0c"},"execution_count":265,"outputs":[{"output_type":"execute_result","data":{"text/plain":["   sepal length (cm)  sepal width (cm)  petal length (cm)  petal width (cm)\n","0                5.1               3.5                1.4               0.2\n","1                4.9               3.0                1.4               0.2\n","2                4.7               3.2                1.3               0.2\n","3                4.6               3.1                1.5               0.2\n","4                5.0               3.6                1.4               0.2"],"text/html":["\n","  <div id=\"df-8df446d5-c7f0-4b32-97ad-f96f1cd86b44\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>sepal length (cm)</th>\n","      <th>sepal width (cm)</th>\n","      <th>petal length (cm)</th>\n","      <th>petal width (cm)</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>5.1</td>\n","      <td>3.5</td>\n","      <td>1.4</td>\n","      <td>0.2</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>4.9</td>\n","      <td>3.0</td>\n","      <td>1.4</td>\n","      <td>0.2</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>4.7</td>\n","      <td>3.2</td>\n","      <td>1.3</td>\n","      <td>0.2</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>4.6</td>\n","      <td>3.1</td>\n","      <td>1.5</td>\n","      <td>0.2</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>5.0</td>\n","      <td>3.6</td>\n","      <td>1.4</td>\n","      <td>0.2</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-8df446d5-c7f0-4b32-97ad-f96f1cd86b44')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-8df446d5-c7f0-4b32-97ad-f96f1cd86b44 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-8df446d5-c7f0-4b32-97ad-f96f1cd86b44');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":265}]},{"cell_type":"code","source":["df_feature2 = df_feature.copy()\n","df_feature2['label'] = labels\n","df_feature2.head(5)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":206},"id":"HFY442DRdcWa","executionInfo":{"status":"ok","timestamp":1661493492938,"user_tz":-540,"elapsed":71,"user":{"displayName":"백인영","userId":"05799183890128669292"}},"outputId":"6129e4e2-6264-4a12-8197-356276bee7a8"},"execution_count":266,"outputs":[{"output_type":"execute_result","data":{"text/plain":["   sepal length (cm)  sepal width (cm)  petal length (cm)  petal width (cm)  \\\n","0                5.1               3.5                1.4               0.2   \n","1                4.9               3.0                1.4               0.2   \n","2                4.7               3.2                1.3               0.2   \n","3                4.6               3.1                1.5               0.2   \n","4                5.0               3.6                1.4               0.2   \n","\n","   label  \n","0      0  \n","1      0  \n","2      0  \n","3      0  \n","4      0  "],"text/html":["\n","  <div id=\"df-4e1834fa-2808-4062-a347-9ce3cf1ae2de\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>sepal length (cm)</th>\n","      <th>sepal width (cm)</th>\n","      <th>petal length (cm)</th>\n","      <th>petal width (cm)</th>\n","      <th>label</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>5.1</td>\n","      <td>3.5</td>\n","      <td>1.4</td>\n","      <td>0.2</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>4.9</td>\n","      <td>3.0</td>\n","      <td>1.4</td>\n","      <td>0.2</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>4.7</td>\n","      <td>3.2</td>\n","      <td>1.3</td>\n","      <td>0.2</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>4.6</td>\n","      <td>3.1</td>\n","      <td>1.5</td>\n","      <td>0.2</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>5.0</td>\n","      <td>3.6</td>\n","      <td>1.4</td>\n","      <td>0.2</td>\n","      <td>0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-4e1834fa-2808-4062-a347-9ce3cf1ae2de')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-4e1834fa-2808-4062-a347-9ce3cf1ae2de button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-4e1834fa-2808-4062-a347-9ce3cf1ae2de');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":266}]},{"cell_type":"code","source":["dic = {\n","    0: 'Setosa',\n","    1: 'Versicolor',\n","    2: 'Virginica'\n","    }"],"metadata":{"id":"--4qnZhLdna4","executionInfo":{"status":"ok","timestamp":1661493492939,"user_tz":-540,"elapsed":71,"user":{"displayName":"백인영","userId":"05799183890128669292"}}},"execution_count":267,"outputs":[]},{"cell_type":"code","source":["df_feature3 = df_feature.copy()\n","df_feature3['target'] = df_feature2['label'].map(dic)\n","df_feature3"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":424},"id":"TyXG1GqhdnXn","executionInfo":{"status":"ok","timestamp":1661493492940,"user_tz":-540,"elapsed":72,"user":{"displayName":"백인영","userId":"05799183890128669292"}},"outputId":"391ddc82-2d18-45a6-fc40-1e09aaf25470"},"execution_count":268,"outputs":[{"output_type":"execute_result","data":{"text/plain":["     sepal length (cm)  sepal width (cm)  petal length (cm)  petal width (cm)  \\\n","0                  5.1               3.5                1.4               0.2   \n","1                  4.9               3.0                1.4               0.2   \n","2                  4.7               3.2                1.3               0.2   \n","3                  4.6               3.1                1.5               0.2   \n","4                  5.0               3.6                1.4               0.2   \n","..                 ...               ...                ...               ...   \n","145                6.7               3.0                5.2               2.3   \n","146                6.3               2.5                5.0               1.9   \n","147                6.5               3.0                5.2               2.0   \n","148                6.2               3.4                5.4               2.3   \n","149                5.9               3.0                5.1               1.8   \n","\n","        target  \n","0       Setosa  \n","1       Setosa  \n","2       Setosa  \n","3       Setosa  \n","4       Setosa  \n","..         ...  \n","145  Virginica  \n","146  Virginica  \n","147  Virginica  \n","148  Virginica  \n","149  Virginica  \n","\n","[150 rows x 5 columns]"],"text/html":["\n","  <div id=\"df-24196834-37ce-4a41-ad05-483b25d02f60\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>sepal length (cm)</th>\n","      <th>sepal width (cm)</th>\n","      <th>petal length (cm)</th>\n","      <th>petal width (cm)</th>\n","      <th>target</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>5.1</td>\n","      <td>3.5</td>\n","      <td>1.4</td>\n","      <td>0.2</td>\n","      <td>Setosa</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>4.9</td>\n","      <td>3.0</td>\n","      <td>1.4</td>\n","      <td>0.2</td>\n","      <td>Setosa</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>4.7</td>\n","      <td>3.2</td>\n","      <td>1.3</td>\n","      <td>0.2</td>\n","      <td>Setosa</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>4.6</td>\n","      <td>3.1</td>\n","      <td>1.5</td>\n","      <td>0.2</td>\n","      <td>Setosa</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>5.0</td>\n","      <td>3.6</td>\n","      <td>1.4</td>\n","      <td>0.2</td>\n","      <td>Setosa</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>145</th>\n","      <td>6.7</td>\n","      <td>3.0</td>\n","      <td>5.2</td>\n","      <td>2.3</td>\n","      <td>Virginica</td>\n","    </tr>\n","    <tr>\n","      <th>146</th>\n","      <td>6.3</td>\n","      <td>2.5</td>\n","      <td>5.0</td>\n","      <td>1.9</td>\n","      <td>Virginica</td>\n","    </tr>\n","    <tr>\n","      <th>147</th>\n","      <td>6.5</td>\n","      <td>3.0</td>\n","      <td>5.2</td>\n","      <td>2.0</td>\n","      <td>Virginica</td>\n","    </tr>\n","    <tr>\n","      <th>148</th>\n","      <td>6.2</td>\n","      <td>3.4</td>\n","      <td>5.4</td>\n","      <td>2.3</td>\n","      <td>Virginica</td>\n","    </tr>\n","    <tr>\n","      <th>149</th>\n","      <td>5.9</td>\n","      <td>3.0</td>\n","      <td>5.1</td>\n","      <td>1.8</td>\n","      <td>Virginica</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>150 rows × 5 columns</p>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-24196834-37ce-4a41-ad05-483b25d02f60')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-24196834-37ce-4a41-ad05-483b25d02f60 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-24196834-37ce-4a41-ad05-483b25d02f60');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":268}]},{"cell_type":"code","source":["plt.figure(figsize=(10,7))\n","sns.scatterplot(df_feature3.iloc[:,0], df_feature3.iloc[:,1], hue=df_feature3['target'], palette='muted')\n","plt.title('Sepal', fontsize=17)\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":518},"id":"CN-a3W4peCfv","executionInfo":{"status":"ok","timestamp":1661493492947,"user_tz":-540,"elapsed":77,"user":{"displayName":"백인영","userId":"05799183890128669292"}},"outputId":"82ccd696-7270-4f70-99ed-c228ea2dedcd"},"execution_count":269,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/seaborn/_decorators.py:43: FutureWarning: Pass the following variables as keyword args: x, y. From version 0.12, the only valid positional argument will be `data`, and passing other arguments without an explicit keyword will result in an error or misinterpretation.\n","  FutureWarning\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 720x504 with 1 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}}]},{"cell_type":"markdown","source":["- 꽃받침의 길이가 작고 넓이가 넓을수록 Setosa일 확률이 높음\n","- 꽃받침의 길이가 긴 경우, Virginica만 존재"],"metadata":{"id":"dWuV6WqxhqLC"}},{"cell_type":"code","source":["plt.figure(figsize=(10,7))\n","sns.scatterplot(df_feature3.iloc[:,2], df_feature3.iloc[:,3], hue=df_feature3['target'], palette='muted')\n","plt.title('Petal', fontsize=17)\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":518},"id":"4q_6J4rjhXR9","executionInfo":{"status":"ok","timestamp":1661493493396,"user_tz":-540,"elapsed":520,"user":{"displayName":"백인영","userId":"05799183890128669292"}},"outputId":"d75130c1-5491-4148-af34-9ab250660f77"},"execution_count":270,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/seaborn/_decorators.py:43: FutureWarning: Pass the following variables as keyword args: x, y. From version 0.12, the only valid positional argument will be `data`, and passing other arguments without an explicit keyword will result in an error or misinterpretation.\n","  FutureWarning\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 720x504 with 1 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}}]},{"cell_type":"markdown","source":["- 꽃잎의 길이가 짧고, 꽃잎의 넓이가 좁은 경우 Setosa\n","- 꽃잎의 길이가 길고, 꽃잎의 넓이가 넓은 경우 Virginica"],"metadata":{"id":"BMSGMdtTh5jA"}},{"cell_type":"code","source":["x = features\n","y = labels\n","\n","x_train, x_test, y_train, y_test = train_test_split(x, y, stratify=y, test_size=0.2, random_state=30)"],"metadata":{"id":"NC67eY-ziKmR","executionInfo":{"status":"ok","timestamp":1661493493397,"user_tz":-540,"elapsed":23,"user":{"displayName":"백인영","userId":"05799183890128669292"}}},"execution_count":271,"outputs":[]},{"cell_type":"code","source":["print(\"x_train의 shape = {}, y_train의 shape = {}\".format(x_train.shape, y_train.shape))\n","print(\"x_test이 shape = {}, y_test의 shape = {}\".format(x_test.shape, y_test.shape))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"58yUDczaiZPd","executionInfo":{"status":"ok","timestamp":1661493493399,"user_tz":-540,"elapsed":24,"user":{"displayName":"백인영","userId":"05799183890128669292"}},"outputId":"7a8692a6-c4df-4ba2-b791-b15786f8338a"},"execution_count":272,"outputs":[{"output_type":"stream","name":"stdout","text":["x_train의 shape = (120, 4), y_train의 shape = (120,)\n","x_test이 shape = (30, 4), y_test의 shape = (30,)\n"]}]},{"cell_type":"markdown","source":["# Convert Datset into Tensor"],"metadata":{"id":"XH6a583fjHdu"}},{"cell_type":"code","source":["x_train, y_train = torch.tensor(x_train).float(), torch.tensor(y_train).float()\n","x_test, y_test = torch.tensor(x_test).float(), torch.tensor(y_test).float()"],"metadata":{"id":"vOli0CXxi_g6","executionInfo":{"status":"ok","timestamp":1661493493405,"user_tz":-540,"elapsed":25,"user":{"displayName":"백인영","userId":"05799183890128669292"}}},"execution_count":273,"outputs":[]},{"cell_type":"markdown","source":["## Bayesian Model"],"metadata":{"id":"GvYoi4uvXEn_"}},{"cell_type":"code","source":["class BayesianNet(nn.Module):\n","   def __init__(self):\n","      super(BayesianNet, self).__init__()\n","      self.hid1 = bnn.BayesLinear(prior_mu=0, prior_sigma=0.1, in_features=4, out_features=100)\n","      self.output = bnn.BayesLinear(prior_mu=0, prior_sigma=0.1, in_features=100, out_features=3)\n","\n","   def forward(self,x):\n","       hid1 = self.hid1(x)\n","       active = torch.relu(hid1)\n","       output = self.output(active) # no softmax: CrossEntropyLoss()\n","       return output"],"metadata":{"id":"HP3qNO6KWpi6","executionInfo":{"status":"ok","timestamp":1661493493407,"user_tz":-540,"elapsed":26,"user":{"displayName":"백인영","userId":"05799183890128669292"}}},"execution_count":274,"outputs":[]},{"cell_type":"code","source":["model = BayesianNet().to(device)\n","model"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"jTFVw2ZhkCpR","executionInfo":{"status":"ok","timestamp":1661493493408,"user_tz":-540,"elapsed":27,"user":{"displayName":"백인영","userId":"05799183890128669292"}},"outputId":"4b626e57-930d-4dc1-e794-f5ee63f24e01"},"execution_count":275,"outputs":[{"output_type":"execute_result","data":{"text/plain":["BayesianNet(\n","  (hid1): BayesLinear(prior_mu=0, prior_sigma=0.1, in_features=4, out_features=100, bias=True)\n","  (output): BayesLinear(prior_mu=0, prior_sigma=0.1, in_features=100, out_features=3, bias=True)\n",")"]},"metadata":{},"execution_count":275}]},{"cell_type":"markdown","source":["## Loss Function"],"metadata":{"id":"UpOKGg48kyV7"}},{"cell_type":"code","source":["ce_loss = torch.nn.CrossEntropyLoss()   # applies softmax()\n","kl_loss = bnn.BKLLoss(reduction='mean', last_layer_only=False)\n","\n","optimizer = optim.Adam(model.parameters(), lr=0.01)"],"metadata":{"id":"vznL1CSlkx-n","executionInfo":{"status":"ok","timestamp":1661493493410,"user_tz":-540,"elapsed":25,"user":{"displayName":"백인영","userId":"05799183890128669292"}}},"execution_count":276,"outputs":[]},{"cell_type":"markdown","source":["## Training"],"metadata":{"id":"hx3YhTAelGfH"}},{"cell_type":"code","source":["kl_weight = 0.1\n","epoch = 1000\n","\n","loss_list = []\n","\n","for step in range(epoch):\n","\n","  model.train()\n","\n","  optimizer.zero_grad()\n","\n","  predict = model(x_train)\n","\n","  labels_long = torch.tensor(y_train, dtype=torch.long)\n","  labels_long = labels_long.to(device)\n","\n","  ce = ce_loss(predict, labels_long)\n","  kl = kl_loss(model)\n","\n","  total_loss = ce + kl*kl_weight\n","  \n","  total_loss.backward()\n","  optimizer.step()\n","\n","  loss_list.append(total_loss.item())"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"CrhiWxRDlFMR","executionInfo":{"status":"ok","timestamp":1661493494690,"user_tz":-540,"elapsed":1304,"user":{"displayName":"백인영","userId":"05799183890128669292"}},"outputId":"3b79ca38-3472-40e6-aa37-e1ec01725eb6"},"execution_count":277,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:14: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).\n","  \n"]}]},{"cell_type":"code","source":["plt.plot(loss_list)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":285},"id":"tomf93d1nl13","executionInfo":{"status":"ok","timestamp":1661493495389,"user_tz":-540,"elapsed":704,"user":{"displayName":"백인영","userId":"05799183890128669292"}},"outputId":"603b17c1-0395-457f-85e7-1f99047091dd"},"execution_count":278,"outputs":[{"output_type":"execute_result","data":{"text/plain":["[<matplotlib.lines.Line2D at 0x7f4927d6d990>]"]},"metadata":{},"execution_count":278},{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 1 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}}]},{"cell_type":"markdown","source":["## Test"],"metadata":{"id":"RvbU8WuEnrmY"}},{"cell_type":"code","source":["with torch.no_grad():\n","  model.eval()\n","\n","  num_total_data = 0\n","  correct_1 = 0\n","  correct_2 = 0\n","  correct_3 = 0\n","\n","  output_1 = model(x_test)\n","  output_softmax_1 = torch.nn.functional.softmax(output_1)\n","\n","  output_2 = model(x_test)\n","  output_softmax_2 = torch.nn.functional.softmax(output_2)\n","\n","  output_3 = model(x_test)\n","  output_softmax_3 = torch.nn.functional.softmax(output_3)\n","\n","  predicted_1 = torch.argmax(output_softmax_1, dim=1)\n","  predicted_2 = torch.argmax(output_softmax_2, dim=1)\n","  predicted_3 = torch.argmax(output_softmax_3, dim=1)\n","\n","  num_total_data += len(y_test)\n","\n","  answer_1 = sum(y_test==predicted_1).item()\n","  correct_1 += answer_1\n","\n","  answer_2 = sum(y_test==predicted_2).item()\n","  correct_2 += answer_2\n","\n","  answer_3 = sum(y_test==predicted_3).item()\n","  correct_3 += answer_3"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"AtxvkxyDnsn6","executionInfo":{"status":"ok","timestamp":1661493495393,"user_tz":-540,"elapsed":54,"user":{"displayName":"백인영","userId":"05799183890128669292"}},"outputId":"2add041d-2602-4a8d-8f3f-dc065ed2b373"},"execution_count":279,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:10: UserWarning: Implicit dimension choice for softmax has been deprecated. Change the call to include dim=X as an argument.\n","  # Remove the CWD from sys.path while we load stuff.\n","/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:13: UserWarning: Implicit dimension choice for softmax has been deprecated. Change the call to include dim=X as an argument.\n","  del sys.path[0]\n","/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:16: UserWarning: Implicit dimension choice for softmax has been deprecated. Change the call to include dim=X as an argument.\n","  app.launch_new_instance()\n"]}]},{"cell_type":"code","source":["print(\"Bayesian Accuracy = %.2f%%\"%((correct_1/num_total_data)*100))\n","print(\"Bayesian Accuracy = %.2f%%\"%((correct_2/num_total_data)*100))\n","print(\"Bayesian Accuracy = %.2f%%\"%((correct_3/num_total_data)*100))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"ZTT8r5o9oMEn","executionInfo":{"status":"ok","timestamp":1661493495396,"user_tz":-540,"elapsed":51,"user":{"displayName":"백인영","userId":"05799183890128669292"}},"outputId":"f83e6685-9ac6-467a-9de8-3d1012cd083d"},"execution_count":280,"outputs":[{"output_type":"stream","name":"stdout","text":["Bayesian Accuracy = 93.33%\n","Bayesian Accuracy = 93.33%\n","Bayesian Accuracy = 96.67%\n"]}]},{"cell_type":"code","source":["unique, counts_1 = np.unique(predicted_1.numpy(), return_counts=True)\n","unique, counts_2 = np.unique(predicted_2.numpy(), return_counts=True)\n","unique, counts_3 = np.unique(predicted_3.numpy(), return_counts=True)"],"metadata":{"id":"2nL6PJwIsrpp","executionInfo":{"status":"ok","timestamp":1661493495401,"user_tz":-540,"elapsed":50,"user":{"displayName":"백인영","userId":"05799183890128669292"}}},"execution_count":281,"outputs":[]},{"cell_type":"code","source":["pd.DataFrame([counts_1, counts_2, counts_3], columns=unique)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":143},"id":"taORvH0tuVxR","executionInfo":{"status":"ok","timestamp":1661493495402,"user_tz":-540,"elapsed":51,"user":{"displayName":"백인영","userId":"05799183890128669292"}},"outputId":"3a966962-8a48-484b-d9d8-a21b3269c0de"},"execution_count":282,"outputs":[{"output_type":"execute_result","data":{"text/plain":["    0   1   2\n","0  10   8  12\n","1  10  12   8\n","2  10   9  11"],"text/html":["\n","  <div id=\"df-5c9892a5-0270-4092-985c-284f91b973b4\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>0</th>\n","      <th>1</th>\n","      <th>2</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>10</td>\n","      <td>8</td>\n","      <td>12</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>10</td>\n","      <td>12</td>\n","      <td>8</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>10</td>\n","      <td>9</td>\n","      <td>11</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-5c9892a5-0270-4092-985c-284f91b973b4')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-5c9892a5-0270-4092-985c-284f91b973b4 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-5c9892a5-0270-4092-985c-284f91b973b4');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":282}]},{"cell_type":"code","source":["bayesian_df = pd.DataFrame({\n","    'pred1': predicted_1,\n","    'pred2': predicted_2,\n","    'pred3': predicted_3\n","})\n","\n","bayesian_df"],"metadata":{"id":"PyVnVoYlspkq"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["# MLP"],"metadata":{"id":"5li3d8Xgo5Fs"}},{"cell_type":"code","source":["class MLP(nn.Module):\n","   def __init__(self):\n","      super(MLP, self).__init__()\n","      self.hid1 = nn.Linear(4, 100)\n","      self.output = nn.Linear(100, 3)\n","\n","   def forward(self,x):\n","       hid1 = self.hid1(x)\n","       active = torch.relu(hid1)\n","       output = self.output(active) # no softmax: CrossEntropyLoss()\n","       return output"],"metadata":{"id":"IQU1eZo5o1ho","executionInfo":{"status":"ok","timestamp":1661493495406,"user_tz":-540,"elapsed":51,"user":{"displayName":"백인영","userId":"05799183890128669292"}}},"execution_count":284,"outputs":[]},{"cell_type":"code","source":["model = MLP().to(device)\n","model"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"JCr2waPYpHCL","executionInfo":{"status":"ok","timestamp":1661493495408,"user_tz":-540,"elapsed":53,"user":{"displayName":"백인영","userId":"05799183890128669292"}},"outputId":"8531f504-d7e9-4c39-c1fc-fafeb3ee660e"},"execution_count":285,"outputs":[{"output_type":"execute_result","data":{"text/plain":["MLP(\n","  (hid1): Linear(in_features=4, out_features=100, bias=True)\n","  (output): Linear(in_features=100, out_features=3, bias=True)\n",")"]},"metadata":{},"execution_count":285}]},{"cell_type":"code","source":["ce_loss = torch.nn.CrossEntropyLoss()   # applies softmax()\n","\n","optimizer = optim.Adam(model.parameters(), lr=0.01)"],"metadata":{"id":"oMs2c5cjpRJE","executionInfo":{"status":"ok","timestamp":1661493495410,"user_tz":-540,"elapsed":51,"user":{"displayName":"백인영","userId":"05799183890128669292"}}},"execution_count":286,"outputs":[]},{"cell_type":"markdown","source":["## Training"],"metadata":{"id":"vIlkg3p-pL8a"}},{"cell_type":"code","source":["epoch = 100\n","\n","loss_list_2 = []\n","\n","for step in range(epoch):\n","\n","  model.train()\n","\n","  optimizer.zero_grad()\n","\n","  predict = model(x_train)\n","\n","  labels_long = torch.tensor(y_train, dtype=torch.long)\n","  labels_long = labels_long.to(device)\n","\n","  loss = ce_loss(predict, labels_long)\n"," \n","  loss.backward()\n","  optimizer.step()\n","\n","  loss_list_2.append(loss.item())"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"TIT0SyV5pLJO","executionInfo":{"status":"ok","timestamp":1661493495413,"user_tz":-540,"elapsed":53,"user":{"displayName":"백인영","userId":"05799183890128669292"}},"outputId":"8ccde912-a7f2-4a95-f14a-546dae79ffc9"},"execution_count":287,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:13: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).\n","  del sys.path[0]\n"]}]},{"cell_type":"code","source":["plt.plot(loss_list_2)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":283},"id":"rNlS82yYpclW","executionInfo":{"status":"ok","timestamp":1661493496168,"user_tz":-540,"elapsed":805,"user":{"displayName":"백인영","userId":"05799183890128669292"}},"outputId":"0062123b-611b-4a04-ccce-d6faa7ed6fa8"},"execution_count":288,"outputs":[{"output_type":"execute_result","data":{"text/plain":["[<matplotlib.lines.Line2D at 0x7f4927cfe810>]"]},"metadata":{},"execution_count":288},{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 1 Axes>"],"image/png":"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\n"},"metadata":{"needs_background":"light"}}]},{"cell_type":"code","source":["with torch.no_grad():\n","  model.eval()\n","\n","  num_total_data = 0\n","  correct_1 = 0\n","  correct_2 = 0\n","  correct_3 = 0\n","\n","  output_1 = model(x_test)\n","  output_softmax_1 = torch.nn.functional.softmax(output_1)\n","\n","  output_2 = model(x_test)\n","  output_softmax_2 = torch.nn.functional.softmax(output_2)\n","\n","  output_3 = model(x_test)\n","  output_softmax_3 = torch.nn.functional.softmax(output_3)\n","\n","  predicted_1 = torch.argmax(output_softmax_1, dim=1)\n","  predicted_2 = torch.argmax(output_softmax_2, dim=1)\n","  predicted_3 = torch.argmax(output_softmax_3, dim=1)\n","\n","  num_total_data += len(y_test)\n","\n","  answer_1 = sum(y_test==predicted_1).item()\n","  correct_1 += answer_1\n","\n","  answer_2 = sum(y_test==predicted_2).item()\n","  correct_2 += answer_2\n","\n","  answer_3 = sum(y_test==predicted_3).item()\n","  correct_3 += answer_3"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"HqDT-GWGphOM","executionInfo":{"status":"ok","timestamp":1661493496169,"user_tz":-540,"elapsed":52,"user":{"displayName":"백인영","userId":"05799183890128669292"}},"outputId":"560a46bf-8577-4230-dcac-c6ba3aaa0d0e"},"execution_count":289,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:10: UserWarning: Implicit dimension choice for softmax has been deprecated. Change the call to include dim=X as an argument.\n","  # Remove the CWD from sys.path while we load stuff.\n","/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:13: UserWarning: Implicit dimension choice for softmax has been deprecated. Change the call to include dim=X as an argument.\n","  del sys.path[0]\n","/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:16: UserWarning: Implicit dimension choice for softmax has been deprecated. Change the call to include dim=X as an argument.\n","  app.launch_new_instance()\n"]}]},{"cell_type":"code","source":["print(\"MLP Accuracy = %.2f%%\"%((correct_1/num_total_data)*100))\n","print(\"MLP Accuracy = %.2f%%\"%((correct_2/num_total_data)*100))\n","print(\"MLP Accuracy = %.2f%%\"%((correct_3/num_total_data)*100))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"bkfk3nypppRV","executionInfo":{"status":"ok","timestamp":1661493496170,"user_tz":-540,"elapsed":32,"user":{"displayName":"백인영","userId":"05799183890128669292"}},"outputId":"cf8685c6-e51c-4b1d-a3ed-9fda90dc2b85"},"execution_count":290,"outputs":[{"output_type":"stream","name":"stdout","text":["MLP Accuracy = 100.00%\n","MLP Accuracy = 100.00%\n","MLP Accuracy = 100.00%\n"]}]},{"cell_type":"code","source":["unique, counts_1 = np.unique(predicted_1.numpy(), return_counts=True)\n","unique, counts_2 = np.unique(predicted_2.numpy(), return_counts=True)\n","unique, counts_3 = np.unique(predicted_3.numpy(), return_counts=True)"],"metadata":{"id":"ZzbpdIl0prq3","executionInfo":{"status":"ok","timestamp":1661493496171,"user_tz":-540,"elapsed":28,"user":{"displayName":"백인영","userId":"05799183890128669292"}}},"execution_count":291,"outputs":[]},{"cell_type":"code","source":["pd.DataFrame([counts_1, counts_2, counts_3], columns=unique)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":143},"id":"Vf0tVTE4ui6m","executionInfo":{"status":"ok","timestamp":1661493496173,"user_tz":-540,"elapsed":29,"user":{"displayName":"백인영","userId":"05799183890128669292"}},"outputId":"0e48c457-ac5e-4611-c78b-394ecfc276f8"},"execution_count":292,"outputs":[{"output_type":"execute_result","data":{"text/plain":["    0   1   2\n","0  10  10  10\n","1  10  10  10\n","2  10  10  10"],"text/html":["\n","  <div id=\"df-3cadd9d4-358a-4db1-9c41-c61e41dae17d\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>0</th>\n","      <th>1</th>\n","      <th>2</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>10</td>\n","      <td>10</td>\n","      <td>10</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>10</td>\n","      <td>10</td>\n","      <td>10</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>10</td>\n","      <td>10</td>\n","      <td>10</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-3cadd9d4-358a-4db1-9c41-c61e41dae17d')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-3cadd9d4-358a-4db1-9c41-c61e41dae17d button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-3cadd9d4-358a-4db1-9c41-c61e41dae17d');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":292}]},{"cell_type":"code","source":[],"metadata":{"id":"s8y6zroRupME","executionInfo":{"status":"ok","timestamp":1661493496175,"user_tz":-540,"elapsed":29,"user":{"displayName":"백인영","userId":"05799183890128669292"}}},"execution_count":292,"outputs":[]}]}